openapi: 3.0.3
info:
  title: Fake Job RESTful API
  description: OpenAPI for FakeJob RestFul API
  version: 1.0.0
  contact:
    name: Muhammad Rizky Yuhari
    email: rizyuhar@gmail.com
    url: https://github.com/rizkyyuhari
servers:
  - description: Fake Job RESTful API Server
    url: https://{environment}/v1/user/
    variables:
      environment:
        description: Server Environment
        default: localhost:9001
        enum:
          - localhost:9001
          - fakejob.uc.r.appspot.com
components:
  schemas:
    ResponseRegister:
      type: object
      properties:
        error:
          type: number
        message:
          type: string
  securitySchemes:
    tokenAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    authRespInvalid:
      description: >-
        Example Response when your token expired or the token structure is
        invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseRegister'
          examples:
            Invalid Token:
              value:
                error: 1
                message: Invalid Token
    authRespUnauthorized:
      description: >-
        Example Response when your not using bearer token when trying to hit
        this endpoint
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseRegister'
          examples:
            Unauthorized user:
              value:
                error: 1
                message: Access Denied! Unauthorized user
paths:
  /register:
    post:
      summary: Create New Account
      description: Create new active Account
      responses:
        '201':
          description: Register Succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseRegister'
              examples:
                success:
                  description: Example Register Success
                  value:
                    error: 0
                    message: Register Succesfully
        '400':
          description: >-
            Failed Register, cause : name, email, password cannot be null or
            empty string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseRegister'
              examples:
                bad request:
                  value:
                    error: 1
                    message: Failed Register. Please fill name, email, and password
        '409':
          description: Email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseRegister'
              examples:
                conflict example:
                  value:
                    error: 1
                    message: This user email is already in use!
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  required: true
                email:
                  type: string
                  required: true
                  uniqueItems: true
                password:
                  type: string
                  required: true
                  format: password
            examples:
              Regis 1:
                value:
                  name: karen
                  email: karen@gmail.com
                  password: karen12345
  /login:
    post:
      summary: Login to Account
      responses:
        '200':
          description: Login Succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: integer
                  message:
                    type: string
                  token:
                    type: string
              examples:
                login succes:
                  value:
                    error: 0
                    message: Logged In!
                    userid: 1
                    token: >-
                      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoicml6a3kiLCJlbWFpbCI6ImphbmNva0BnbWFpbC5jb20iLCJpYXQiOjE2NTM3Mzk2MzEsImV4cCI6MTY1MzgyNjAzMX0.QU1YDidwoXx8kGYqKG0PvzCgi4zrWaGt_hiISqig6L0
        '401':
          description: Wrong Password!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: number
                  message:
                    type: string
              examples:
                email not found:
                  value:
                    error: 1
                    message: Wrong Password!
        '404':
          description: Email Not Found!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: number
                  message:
                    type: string
              examples:
                email not found:
                  value:
                    error: 1
                    message: Email not Found!
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  required: true
                  uniqueItems: true
                password:
                  type: string
                  required: true
                  format: password
            examples:
              scenario-1:
                value:
                  email: karent@gmail.com
                  password: karent1234
  /bio:
    patch:
      security:
        - tokenAuth: []
      summary: update detail profile
      description: this endpoint and method to update profile detail of each user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                  format: binary
                name:
                  type: string
                birthday:
                  type: string
                  format: date
                phonenumber:
                  type: string
                nation:
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: number
                  message:
                    type: string
              examples:
                success:
                  value:
                    error: 0
                    message: Update Succesfully
        '401':
          $ref: '#/components/responses/authRespInvalid'
        '403':
          $ref: '#/components/responses/authRespUnauthorized'
    post:
      security:
        - tokenAuth: []
      summary: get detail profile
      description: This method will return profile record each user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                userid:
                  type: number
      responses:
        '200':
          description: Example when request success
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  email:
                    type: string
                  profilePhoto:
                    type: string
                  phonenumber:
                    type: string
                  birthday:
                    type: string
                    format: date
                  nation:
                    type: string
                  updated_at:
                    type: string
                    format: date-time
              examples:
                value:
                  name: karen
                  email: karen@gamil.com
                  profilePhoto: www.gcloud/image.jpg
                  phonenumber: '0812393259238'
                  birthday: '2022-05-29'
                  nation: Indonesia
                  updated_at: '2022-05-28T12:19:09.000Z'
        '401':
          $ref: '#/components/responses/authRespInvalid'
        '403':
          $ref: '#/components/responses/authRespUnauthorized'
  /inputargumen:
    post:
      security:
        - tokenAuth: []
      summary: input argumen to train in ml model
      description: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userid:
                  type: number
                  required: true
                input:
                  type: string
                  required: true
            examples:
              Success:
                value:
                  userid: 1
                  input: string train to ml
      responses:
        '200':
          description: input success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseRegister'
              examples:
                Sucess:
                  value:
                    error: 0
                    message: Succesfully added Input
        '401':
          $ref: '#/components/responses/authRespInvalid'
        '403':
          $ref: '#/components/responses/authRespUnauthorized'
  /history:
    get:
      summary: Get All public history
      description: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserID:
                    type: number
                  input:
                    type: string
                  output:
                    type: boolean
                  created_at:
                    type: string
                    format: date-time
              examples:
                success scenario:
                  description: Example Success GET all history
                  value:
                    error: 0
                    datas:
                      - UserID: 49
                        input: input3
                        output: output3
                        created_at: '2022-05-28T12:19:21.000Z'
                      - UserID: 100
                        input: input2
                        output: output2
                        created_at: '2022-05-28T12:19:21.000Z'
                      - UserID: 5
                        input: input1
                        output: output1
                        created_at: '2022-05-28T12:19:09.000Z'
          description: Get all publi history
        '401':
          $ref: '#/components/responses/authRespInvalid'
        '403':
          $ref: '#/components/responses/authRespUnauthorized'
      security:
        - tokenAuth: []
  /history/{userid}:
    get:
      summary: Get all history by Account id
      description: ''
      parameters:
        - schema:
            type: integer
          name: userid
          in: path
          required: true
          description: input UserID from login response
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: number
                  datas:
                    type: array
                    items:
                      properties:
                        UserID:
                          type: number
                        input:
                          type: string
                        output:
                          type: string
                        created_at:
                          type: string
                          format: date-time
              examples:
                success scenario:
                  description: Example Success GET own history
                  value:
                    error: 0
                    datas:
                      - UserID: 1
                        input: input2
                        output: output2
                        created_at: '2022-05-28T12:19:21.000Z'
                      - UserID: 1
                        input: input1
                        output: output1
                        created_at: '2022-05-28T12:19:09.000Z'
        '401':
          $ref: '#/components/responses/authRespInvalid'
        '403':
          $ref: '#/components/responses/authRespUnauthorized'
      security:
        - tokenAuth: []
